name: Build

# Run this workflow every time a new commit pushed to your repository

on: push

env:
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  CCACHE_COMPILERCHECK: none

jobs:
  macos:
    name: Build MacOS dylib (x86-64 and arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
      - name: Cache autoconf
        uses: actions/cache@v4
        with:
          path: configcache
          key: ${{ runner.os }}-configcache
      - name: Build
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          ./native/build-macos.sh
      - name: Archive MacOS library
        uses: actions/upload-artifact@v4
        with:
          name: maclib
          path: libarchive.dylib
          if-no-files-found: error
          retention-days: 1
  linux:
    needs: [macos]
    name: Build Linux x86-64 code and wrapper
    runs-on: ubuntu-22.04
    steps:
      - name: Ubuntu packages
        run: sudo apt-get install -y libeatmydata1
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
          else
            VERSION="0.0.0-dev"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          fi
          echo "Extracted version: $VERSION"
      - name: Retrieve MacOS library
        uses: actions/download-artifact@v4
        with:
          name: maclib
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4.3.1
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
      - name: Cache autoconf
        uses: actions/cache@v4
        with:
          path: configcache
          key: ${{ runner.os }}-configcache
      - name: Build native library
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          ./native/build-linux.sh
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'csharp'
          build-mode: manual
      - name: Built .Net package and test
        run: |
          mkdir -p LibArchive.Net/runtimes/osx-any64 LibArchive.Net/runtimes/linux-x64
          mv libarchive.so LibArchive.Net/runtimes/linux-x64/
          mv libarchive.dylib LibArchive.Net/runtimes/osx-any64/
          touch libarchive.dylib
          dotnet build --configuration Release
          dotnet test --nologo
          dotnet pack LibArchive.Net/LibArchive.Net.csproj -o . -p:PackageVersion=${{ steps.version.outputs.VERSION }} --nologo
          ls -lh *.nupkg
          du -sh *
          rm -rf local {bzip2,libarchive,libxml2,lz4,lzo,musl-cross-make,xz,zlib,zstd}-* musl-cross-make-master
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      - name: Upload built packages
        uses: svenstaro/upload-release-action@2.11.2
        if: contains(github.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.nupkg'
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            *.nupkg
      - name: Upload built packages
        uses: svenstaro/upload-release-action@2.11.2
        if: contains(github.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.nupkg'
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Upload Nuget package
        if: contains(github.ref, 'refs/tags/v')
        run: dotnet nuget push *.nupkg -k ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json
