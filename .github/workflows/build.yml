name: Build

# Run this workflow every time a new commit pushed to your repository

on: pull_request

env:
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  CCACHE_COMPILERCHECK: none

jobs:
  macos:
    name: Build MacOS dylib (x86-64 and arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
      - name: Cache autoconf
        uses: actions/cache@v4
        with:
          path: configcache
          key: macos-configcache-ccache-v1
      - name: Build
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CCACHE_COMPILERCHECK=content
          ./native/build-macos.sh
      - name: Archive MacOS library
        uses: actions/upload-artifact@v4
        with:
          name: maclib
          path: libarchive.dylib
          if-no-files-found: error
          retention-days: 1
  windows:
    name: Build Windows DLLs (x86, x64, arm64)
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86, x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Install MinGW
        run: |
          sudo apt-get update
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            # ARM64 requires LLVM-MinGW
            curl -sL https://github.com/mstorsjo/llvm-mingw/releases/download/20240619/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz | tar xJ
            echo "$(pwd)/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/bin" >> $GITHUB_PATH
          else
            # x86 and x64 use standard mingw-w64
            sudo apt-get install -y mingw-w64
          fi
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: windows-${{ matrix.arch }}
      - name: Setup ccache for MinGW
        run: |
          mkdir -p $HOME/.ccache-bin
          for tool in gcc g++; do
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              ln -sf $(which ccache) $HOME/.ccache-bin/aarch64-w64-mingw32-$tool
            elif [ "${{ matrix.arch }}" = "x64" ]; then
              ln -sf $(which ccache) $HOME/.ccache-bin/x86_64-w64-mingw32-$tool
            else
              ln -sf $(which ccache) $HOME/.ccache-bin/i686-w64-mingw32-$tool
            fi
          done
          echo "$HOME/.ccache-bin" >> $GITHUB_PATH
      - name: Cache autoconf
        uses: actions/cache@v4
        with:
          path: configcache
          key: windows-configcache-ccache-${{ matrix.arch }}-v1
      - name: Build Windows DLL
        run: |
          export CCACHE_COMPILERCHECK=content
          export ARCH=${{ matrix.arch }}
          ./native/build-windows.sh
      - name: Archive Windows DLL
        uses: actions/upload-artifact@v4
        with:
          name: winlib-${{ matrix.arch }}
          path: archive-*.dll
          if-no-files-found: error
          retention-days: 1
  linux:
    needs: [macos, windows]
    name: Build Linux x86-64 code and wrapper
    runs-on: ubuntu-22.04
    steps:
      - name: Ubuntu packages
        run: sudo apt-get install -y libeatmydata1
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
          else
            VERSION="0.0.0-dev"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          fi
          echo "Extracted version: $VERSION"
      - name: Retrieve MacOS library
        uses: actions/download-artifact@v5
        with:
          name: maclib
      - name: Retrieve Windows x86 DLL
        uses: actions/download-artifact@v5
        with:
          name: winlib-x86
      - name: Retrieve Windows x64 DLL
        uses: actions/download-artifact@v5
        with:
          name: winlib-x64
      - name: Retrieve Windows arm64 DLL
        uses: actions/download-artifact@v5
        with:
          name: winlib-arm64
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5.0.0
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
      - name: Cache autoconf
        uses: actions/cache@v4
        with:
          path: configcache
          key: linux-configcache-ccache-v1
      - name: Build native library
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CCACHE_COMPILERCHECK=content
          ./native/build-linux.sh
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: 'csharp'
          build-mode: manual
      - name: Built .Net package and test
        run: |
          mkdir -p LibArchive.Net/runtimes/{osx-x64,osx-arm64,linux-x64,linux-musl-x64,win-x86,win-x64,win-arm64}/native

          # Linux
          mv libarchive.so LibArchive.Net/runtimes/linux-x64/native/
          cp LibArchive.Net/runtimes/linux-x64/native/libarchive.so LibArchive.Net/runtimes/linux-musl-x64/native/

          # macOS
          mv libarchive.dylib LibArchive.Net/runtimes/osx-x64/native/
          cp LibArchive.Net/runtimes/osx-x64/native/libarchive.dylib LibArchive.Net/runtimes/osx-arm64/native/

          # Windows
          mv archive-x86.dll LibArchive.Net/runtimes/win-x86/native/archive.dll
          mv archive-x64.dll LibArchive.Net/runtimes/win-x64/native/archive.dll
          mv archive-arm64.dll LibArchive.Net/runtimes/win-arm64/native/archive.dll

          touch libarchive.dylib

          # Build and pack the library first
          dotnet pack LibArchive.Net/LibArchive.Net.csproj -o . -p:PackageVersion=${{ steps.version.outputs.VERSION }} --configuration Release --nologo

          # Extract package to verify contents
          echo "=== Package contents ==="
          PACKAGE_FILE=$(ls LibArchive.Net.*.nupkg)
          echo "Package file: $PACKAGE_FILE"
          unzip -l "$PACKAGE_FILE" | grep -E "runtimes/|\.targets|lib/"

          # Restore and test using the local NuGet package
          echo "=== Testing with local NuGet package ==="
          dotnet restore Test.LibArchive.Net/Test.LibArchive.Net.csproj --source . --source https://api.nuget.org/v3/index.json /p:UseLocalPackage=true
          dotnet build Test.LibArchive.Net/Test.LibArchive.Net.csproj --configuration Release --no-restore /p:UseLocalPackage=true

          # Debug: Show test output directory
          echo "=== Test output directory ==="
          ls -laR Test.LibArchive.Net/bin/Release/net9.0/runtimes/ 2>/dev/null || echo "No runtimes folder in test output!"

          dotnet test Test.LibArchive.Net/Test.LibArchive.Net.csproj --configuration Release --no-build --nologo /p:UseLocalPackage=true
          ls -lh *.nupkg
          du -sh *
          rm -rf local {bzip2,libarchive,libxml2,lz4,lzo,musl-cross-make,xz,zlib,zstd}-* musl-cross-make-master
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
      - name: Upload built packages
        uses: svenstaro/upload-release-action@2.11.2
        if: contains(github.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.nupkg'
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            *.nupkg
      - name: Upload built packages
        uses: svenstaro/upload-release-action@2.11.2
        if: contains(github.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.nupkg'
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Upload Nuget package
        if: contains(github.ref, 'refs/tags/v')
        run: dotnet nuget push *.nupkg -k ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json

  mono-test:
    name: Test .NET Standard 2.0 with Mono
    needs: [linux]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Mono
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-complete mono-devel
          mono --version

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5.0.0

      - name: Retrieve build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist

      - name: Extract and setup libraries
        run: |
          # Extract the nupkg to get the native libraries
          unzip -q *.nupkg -d extracted
          mkdir -p LibArchive.Net/runtimes
          cp -r extracted/runtimes/* LibArchive.Net/runtimes/
          ls -laR LibArchive.Net/runtimes/

      - name: Build test project for .NET Framework
        run: |
          dotnet restore Test.LibArchive.Net/Test.LibArchive.Net.csproj
          dotnet build Test.LibArchive.Net/Test.LibArchive.Net.csproj --configuration Release --framework net462 --no-restore

      - name: Run tests with Mono (.NET Standard 2.0)
        run: |
          # Run tests targeting net462 which uses the netstandard2.0 library
          dotnet test Test.LibArchive.Net/Test.LibArchive.Net.csproj --configuration Release --framework net462 --no-build --verbosity normal

      - name: Display test results
        if: always()
        run: |
          echo "Mono version used:"
          mono --version
          echo "Test completed for .NET Standard 2.0 compatibility"
